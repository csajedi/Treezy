"""This singleton class handles merkle tree interactions, maintains a single digest store and handles outputting proofs in the respective format. It may form the basis for a Zilliqa implementation of the [SideTree](https://github.com/decentralized-identity/sidetree/blob/master/docs/protocol.md) protocol as it is upgraded in the future."""

import calendar
import time
from pymerkle import *
from fastapi.encoders import jsonable_encoder
from .errors import *
class Tree:
    """Tree class wraps and uses the defaults for pymerkle. It accepts SHA-256 hashes, and UTF-8 encoding. For testing you might benefit from turning off preimage protection"""
    def __init__(self, file=None):
        """sets up the underlying merkle tree
        
        Parameters:
        file (str): Optional recovery of tree state dumped by export().
        """
        if file is None:
            self.merkle = MerkleTree()
        else:
            self.merkle = MerkleTree.loadFromFile(file)


    def export(self):
        """export the tree as json to a file called tree_<calendar>.json"""
        filestring = "tree_" + str(calendar.timegm(time.gmtime())) + ".json"
        print("exporting tree to "+filestring)
        self.merkle.export(filestring)
        print("printed tree to json")

    def stamp(self, digest):
        """this method will add the digest to the merkle tree and return the full proof serialized.
        Errors: 
        DigestFormatError"""
        try:
            # note this function assumes hexadecimal.
            proof = self.merkle.merkleProof({'checksum': digest}).toJSONString()
            print(proof)
            return proof
        except:
            raise errors.DigestFormatError

    
    def validate(self, proof):
        """this method will return whether or not the proof submitted is valid. Assumes proof was generated by this service, with pymerkle.toJSONString(). Note the proof could be considered valid even if it's digest isn't in this service's merkle tree.

        Returns: 
        

        Errors: 
        ValidationError"""

        try:
            tmp = Proof.deserialize(proof)
            print(tmp)
            return validateProof(tmp, get_receipt=True).toJsonString()
        except:
            raise errors.ValidationError
        

    def current_root(self):
        return self.merkle.get_commitment()

    def consistency_proof(self, subhash):
        """Returns a consistency proof that the subhash is a valid ancestor root of the current one
        Returns:
        A pymerkle.Proof object serialized to JSON
        """
        return self.merkle.merkleProof({'subhash': subhash}).toJSONString()
